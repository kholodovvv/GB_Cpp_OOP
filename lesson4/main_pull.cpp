#include <iostream>
#include "ArrayInt.h"
#include <vector>
#include <set>
#include <stdlib.h>

/* ***************************************** Задание 1 *****************************************
 * Добавить в контейнерный класс, который был написан в этом уроке, методы:
 * ●	для удаления последнего элемента массива (аналог функции pop_back() в векторах) 
 * ●	для удаления первого элемента массива (аналог pop_front() в векторах)
 * ●	для сортировки массива
 * ●	для вывода на экран элементов.
 * *********************************************************************************************/

//Код реализован в файле ArrayInt.h

// **********************************************************************************************

/* ***************************************** Задание 2 *****************************************
 * Дан вектор чисел, требуется выяснить, сколько среди них различных.
 * Постараться использовать максимально быстрый алгоритм.
 * *********************************************************************************************/

unsigned differentNumbers(std::vector<int> *array){

std::vector<int> arr = *array;

std::set<int> s(arr.begin(), arr.end());

arr.swap(arr);

  return s.size();
}

// **********************************************************************************************

/* ***************************************** Задание 3 *****************************************
 * Реализовать класс Hand, который представляет собой коллекцию карт. В классе будет одно
 * поле: вектор указателей карт (удобно использовать вектор, т.к. это по сути динамический
 * массив, а тип его элементов должен быть - указатель на объекты класса Card). Также в классе
 * Hand должно быть 3 метода:
 * ●	метод Add, который добавляет в коллекцию карт новую карту, соответственно он
 * принимает в качестве параметра указатель на новую карту
 * ●	метод Clear, который очищает руку от карт
 * ●	метод GetValue, который возвращает сумму очков карт руки (здесь предусмотреть
 * возможность того, что туз может быть равен 11).
 * *********************************************************************************************/

class Hand{
public:

Hand(std::vector<Card*> cards): m_Cards(cards)
{ }

void Add(Card* pCard){

  m_Cards.push_back(pCard);
}

void Clear(){

  m_Cards.clear();
}

int GetValue(){

Card cr;
int total = 0;

for(int i = 0; i < m_Cards.size(); ++i){
  total += cr.getValue(m_Cards[i].valueCard);
}

  return total;
}

private:
std::vector<Card*> m_Cards;
};
// **********************************************************************************************

int main(const int argc, const char** argv){

//Task1
ArrayInt array(2);
array[0] = 3;
array[1] = 2;

array.resize(3);
array[2] = 6;

array.pop_back();
array.sort();
array.print(1);

//Task2
int answer = 0;
std::vector<int>  arr(6);
arr[0] = 2;
arr[1] = 3;
arr[2] = 6;
arr[3] = 6;
arr[4] = 7;
arr[5] = 7;

answer = differentNumbers(&arr);
std::cout << "THE NUMBER OF DIFFERENT NUMBERS: " << answer << ";" << std::endl;

arr.swap(arr);

return 0;
}